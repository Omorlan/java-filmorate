DROP TABLE IF EXISTS review_likes;
DROP TABLE IF EXISTS reviews;
DROP TABLE IF EXISTS likes;
DROP TABLE IF EXISTS film_genres;
DROP TABLE IF EXISTS friendship;
DROP TABLE IF EXISTS events;
DROP TABLE IF EXISTS film_directors;
DROP TABLE IF EXISTS directors;
DROP TABLE IF EXISTS films;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS genres;
DROP TABLE IF EXISTS mpa;



CREATE TABLE IF NOT EXISTS mpa (
    mpa_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    mpa_name VARCHAR(40),
    CONSTRAINT mpa_id_pk PRIMARY KEY (mpa_id)
);
CREATE TABLE IF NOT EXISTS genres (
    genre_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    genre_name VARCHAR(128),
    CONSTRAINT genre_id_pk PRIMARY KEY (genre_id)
);
CREATE TABLE IF NOT EXISTS directors (
    director_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    director_name VARCHAR(128) NOT NULL
);
CREATE TABLE IF NOT EXISTS users (
  user_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  user_name VARCHAR(128),
  user_login VARCHAR(40),
  user_email VARCHAR(128),
  user_birthday TIMESTAMP,
  CONSTRAINT user_id_pk PRIMARY KEY (user_id),
  CONSTRAINT unique_email UNIQUE (user_email)
);

CREATE TABLE IF NOT EXISTS films (
    film_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    film_name VARCHAR(256),
    film_description VARCHAR(256),
    film_duration BIGINT,
    film_releaseDate TIMESTAMP,
    mpa_id BIGINT REFERENCES mpa (mpa_id),
    CONSTRAINT film_id_pk PRIMARY KEY (film_id)
);

CREATE TABLE IF NOT EXISTS likes (
    film_id BIGINT REFERENCES films (film_id) ON DELETE CASCADE,
    user_id BIGINT REFERENCES users (user_id) ON DELETE CASCADE,
    CONSTRAINT likes_pk PRIMARY KEY (film_id, user_id)
);

CREATE TABLE IF NOT EXISTS film_directors (
    film_id BIGINT REFERENCES films (film_id) ON DELETE CASCADE,
    director_id BIGINT REFERENCES directors (director_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, director_id)
);

CREATE TABLE IF NOT EXISTS film_genres (
  film_id BIGINT NOT NULL,
  genre_id BIGINT NOT NULL,
  CONSTRAINT film_genres_pk PRIMARY KEY (film_id, genre_id),
  CONSTRAINT fk_film FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE,
  CONSTRAINT fk_genre FOREIGN KEY (genre_id) REFERENCES genres (genre_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS friendship (
  accepting_user_id BIGINT REFERENCES users (user_id) ON DELETE CASCADE,
  requesting_user_id BIGINT REFERENCES users (user_id) ON DELETE CASCADE,
  status VARCHAR(40),
  CONSTRAINT friendship_pk PRIMARY KEY (accepting_user_id, requesting_user_id)
);

CREATE TABLE IF NOT EXISTS reviews (
    review_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    content VARCHAR(1024) NOT NULL,
    is_positive BOOLEAN NOT NULL,
    user_id BIGINT REFERENCES users (user_id) ON DELETE CASCADE,
    film_id BIGINT REFERENCES films (film_id) ON DELETE CASCADE,
    useful BIGINT,
    CONSTRAINT review_id_pk PRIMARY KEY (review_id)
);

CREATE TABLE IF NOT EXISTS review_likes (
    review_id BIGINT REFERENCES reviews (review_id) ON DELETE CASCADE,
    user_id BIGINT REFERENCES users (user_id) ON DELETE CASCADE,
    is_useful BOOLEAN,
    CONSTRAINT review_likes_pk PRIMARY KEY (review_id, user_id)
);

CREATE TABLE events (
    event_id BIGINT PRIMARY KEY AUTO_INCREMENT,
    timestamp BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    event_type VARCHAR(10) NOT NULL,
    operation VARCHAR(10) NOT NULL,
    entity_id BIGINT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);